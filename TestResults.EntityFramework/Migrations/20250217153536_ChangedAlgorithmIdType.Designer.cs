// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestResults.EntityFramework;

#nullable disable

namespace TestResults.EntityFramework.Migrations
{
    [DbContext(typeof(TestResultsDbContext))]
    [Migration("20250217153536_ChangedAlgorithmIdType")]
    partial class ChangedAlgorithmIdType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("TestResults.Entities.Algorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Algorithms");
                });

            modelBuilder.Entity("TestResults.Entities.AlgorithmType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AlgorithmTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Asymmetric"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Hashing"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Symmetric"
                        });
                });

            modelBuilder.Entity("TestResults.Entities.MemoryUsageResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .HasColumnType("TEXT");

                    b.Property<long>("DecryptionMemoryUsage")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EncryptionMemoryUsage")
                        .HasColumnType("INTEGER");

                    b.HasKey("TestResultId");

                    b.ToTable("MemoryUsageResults");
                });

            modelBuilder.Entity("TestResults.Entities.RunTimeResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TimeToDecrypt")
                        .HasColumnType("REAL");

                    b.Property<double>("TimeToEncrypt")
                        .HasColumnType("REAL");

                    b.HasKey("TestResultId");

                    b.ToTable("RunTimeResults");
                });

            modelBuilder.Entity("TestResults.Entities.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TestResults.Entities.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AlgorithmId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("TestResults.Entities.Algorithm", b =>
                {
                    b.HasOne("TestResults.Entities.AlgorithmType", "Type")
                        .WithMany("Algorithms")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TestResults.Entities.MemoryUsageResult", b =>
                {
                    b.HasOne("TestResults.Entities.TestResult", "TestResult")
                        .WithOne("MemoryUsageResult")
                        .HasForeignKey("TestResults.Entities.MemoryUsageResult", "TestResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("TestResults.Entities.RunTimeResult", b =>
                {
                    b.HasOne("TestResults.Entities.TestResult", "TestResult")
                        .WithOne("RunTimeResult")
                        .HasForeignKey("TestResults.Entities.RunTimeResult", "TestResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("TestResults.Entities.TestResult", b =>
                {
                    b.HasOne("TestResults.Entities.Algorithm", "Algorithm")
                        .WithMany("TestResults")
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestResults.Entities.TestCase", "TestCase")
                        .WithMany("TestResults")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Algorithm");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestResults.Entities.Algorithm", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("TestResults.Entities.AlgorithmType", b =>
                {
                    b.Navigation("Algorithms");
                });

            modelBuilder.Entity("TestResults.Entities.TestCase", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("TestResults.Entities.TestResult", b =>
                {
                    b.Navigation("MemoryUsageResult");

                    b.Navigation("RunTimeResult");
                });
#pragma warning restore 612, 618
        }
    }
}
